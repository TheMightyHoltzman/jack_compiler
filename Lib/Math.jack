class Math {

	field Array twoToThe;

	function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1; 
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 32768;
	}
	
	function int multiply(int x, int y) {
		var int sum, shiftedX, counter;
		let sum = 0;
		let counter = 0;
		let shiftedX = x;
		
		while(counter < 16) {
			if (Math.bit(y, counter)) {
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let counter = counter + 1;
		}
		
		return sum;
	}
	
	function int min(int x, int y) {
		if (x < y) {
			return x;
		}
		return y;
	}
	
	function int max(int x, int y) {
		if (x > y) {
			return x;
		}
		return y;
	}
	
	function int sqrt(int x) {
		var int y, xHalf;
		let y = 0;
		let xHalf = (x/2) -1;
		while (xHalf > -1) {
			//if (y+2^j)^2 <= x {
			if (Math.square(y + twoToThe[j])) {
			 	let y = y+2^j
			 }
		}
		return y;
	}
	
	function int square(int x) {
		return x*x;
	}
	
	function int divide(int x, int y) {
		var int q, xPos, yPos, res, sign;
		var boolean isNeg = false;
		
		if ((y  > x) | (y < 0)) {
			return 0; 	
		}
		
		let xPos = Math.abs(x);
		let yPos = Math.abs(y);
		
		if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
			isNeg = true;
		}
		
		if (yPos > xPos) {
			return 0;
		}
		
		let q = Math.divide(xPos, 2*yPos);
		
		if ((xPos-(2*q*yPos)) < yPos) {
			let res = 2*q;
		} 
		else {
			let res = 2*q + 1;
		}
		
		if (isNeg) {
			let res = -res; 
		}
		return res;
	}
	
	function int abs(int x) {
		if (x < 0) {
			return -x;
		}
		return x;
	}
	
	function boolean bit(int x, int i) {
		return ~((twoToThe[i] & x) = 0);
	}
}